# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    app.redis_read_write_provider:
        class: Redis
        autowire: false
        autoconfigure: false
        factory: [ 'Symfony\Component\Cache\Adapter\RedisAdapter', 'createConnection' ]
        arguments:
            $dsn: 'redis://redis/0'

    app.redis_read_provider:
        class: Redis
        autowire: false
        autoconfigure: false
        factory: [ 'Symfony\Component\Cache\Adapter\RedisAdapter', 'createConnection' ]
        arguments:
            $dsn: 'redis://redis/1'

    app.cache.adapter.redis:
        class: App\Service\RedisReadWriteAdapter
        autowire: false
        autoconfigure: false
        arguments:
            - '@app.redis_read_write_provider'
            - ''
            - 0
            - '@?cache.default_marshaller'
            - '@app.redis_read_provider'
        calls:
            -   setLogger: [ '@?logger' ]
        tags:
            - { name: cache.pool, provider: app.redis_read_write_provider, clearer: cache.default_clearer, reset: reset }
            - { name: monolog.logger, channel: cache }
